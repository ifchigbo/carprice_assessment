from chart_analysis import getColumnsofInterest,getBarChartofMostSalesbyDoor
from matplotlib import pyplot as plt


def getAnalytics():
    try:
        #get the unique label types for the car label and assign to the variable car_data_label
        car_data_labels = list(getColumnsofInterest()['carbody'].unique())

        price_of_carbody = [] #This list is for the collection of the cummulative care price for each car body type

        for items in range(len(car_data_labels)): # This loop handles the process of computing the total sum of car sales per body
            #item 0 = convertible, item 1 = hatchback, item 2 = sedan, item 3 = wagon, item 4 = hardback
            price_of_carbody.append(getColumnsofInterest().loc[getColumnsofInterest()['carbody']== car_data_labels[items] ].sum()['price'])

        ###
        barChartAnalysis = getBarChartofMostSalesbyDoor()
        x=barChartAnalysis['doornumber']
        y=barChartAnalysis['price']
        ####
        
        fig,(ax1,ax2,ax3) = plt.subplots(3,1,figsize=(15, 20)) # creat a subplot with 2 rows and 1 column
        fig.tight_layout(pad=5.0)
        ax1.set(title="Highest Revenue Generated per Car body")
        #create a pie chart for for the car body showing the total percentage of sales generated by each car body in relation to the total sales made
        ax1.pie(price_of_carbody, labels=car_data_labels, explode=(0.1, 0.1, 0.1, 0.1,0.1),shadow=True, startangle=40,autopct='%1.1f%%')
        ax1.legend(title="Car Body",loc="center right",bbox_to_anchor=(-0.10, .5))

        #create a bar chart showing the total income sales per car body 
        ax2.set(title="Distribution of Total Sales per Car Body Type",xlabel="Car Body Type", ylabel="Total Sales for the Period")
        ax2.bar(car_data_labels,price_of_carbody)
        ax2.grid(True,alpha=0.5, linestyle='--', color='gray')
        ax2.set_facecolor('whitesmoke')

        ax3.set(title="Total Sales of Cars by Door Type(2/4 Doors)",xlabel="Total Door Type", ylabel="Total Sales of Car")
        ax3.bar(x,y,color='r')
        ax3.grid(alpha=0.5, linestyle='--', color='gray')
        ax3.legend()

        plt.show()
    except BaseException as error:
        print("The following error has occurred: {}".format(error))

if __name__ == '__main__':
    getAnalytics()